% Time-stamp: <2011-05-11 18:35:10 cmauclai>
%
% Copyright 2010 by Cedric Mauclair
%
% This file may be distributed and/or modified according to the
% following licences:
%
% 1. CCPL Attribution-ShareAlike License
%    (http://creativecommons.org/licenses/by-sa/3.0/legalcode)
% 2. GNU Public License 3
%    (http://www.gnu.org/licenses/gpl.html)
%
%         ————————————————————————————————————————————————————
%
% Latest major version: 1.0
% Date: 2011-02-04
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% General purpose tools for LaTeX (c) Cedric Mauclair, 2011.
%   * ideas and/or snippets borrowed from ConTeXt
%   * ideas and/or snippets borrowed from pgf
%
%   [2011-03-02] Version: 0.1 -- First release.
%   [2011-04-02] Version: 1.0 -- First functionnal release.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\ProvidesPackage{acmetoolbox}[2011/02/04 Usefull LaTeX macros]


%<< [· Some requirements ·····················] >>

\RequirePackage{pgfkeys, pgffor, acmepkh}

%>>

%<< [· Usefull shortcuts ·····················] >>

\let\@NX\noexpand
\let\@EA\expandafter
\def\@EAEAEA{\expandafter\expandafter\expandafter}

%>>
%<< [· Usefull \doif...else ··················] >>

%D macros \doifnextcharelse,
%D        \doifnextoptionnalelse,
%D        \doifnextbgroupelse
%D
%D Example:
%D
%D \doifnextcharelse[{\command}{\command[<default args>]}

\let\doifnextcharelse     \pgfutil@ifnextchar
\def\doifnextoptionalelse {\doifnextcharelse[}
\def\doifnextbgroupelse   {\doifnextcharelse\bgroup}


%D macros \doifinstringelse,
%D        \doifassingmentelse
%D
%D Example:
%D
%D \doifinstringelse{=}{arg}{key/value list}{simple list}
%D \doifassingmentelse{arg}{key/value list}{simple list}

\def\doifinstringelse#1#2#3#4{%
  \pgfutil@in@{#1}{#2}%
  \ifpgfutil@in@#3\else#4\fi}
\def\doifassignmentelse{\doifinstringelse{=}}

%D macro \doifpositive

\def\doifpositiveelse#1#2#3{\ifdim#1<0pt#3\else#2\fi}

%>>
%<< [· Usefull loop features ·················] >>

%D macros \processcommalist
%D
%D Example:
%D
%D \def\enclose#1{(#1)}
%D \processcommalist[one, two, three=four]\print
%D         ==> (one)(two)(three=four)

\def\processcommalist[#1]#2{%
  \pgfqkeys{/processcommalist}{.code=#2{##1}, .list={#1}}}

%>>
%<< [· Usefull macros ························] >>

% set dimen to an expression
\def\setlen#1#2{#1\dimexpr#2\relax}
\def\gsetlen#1#2{\global#1\dimexpr#2\relax}

\def\setlencs #1#2{\def#1{\dimexpr#2\relax}}
\def\esetlencs#1#2{\edef#1{\dimexpr#2\relax}}
\def\gsetlencs#1#2{\gdef#1{\dimexpr#2\relax}}
\def\xsetlencs#1#2{\xdef#1{\dimexpr#2\relax}}

% ensure a dimen in above/below an expression
\def\ensure #1#2#3\relax{\ifdim#3#2#1 #1{\dimexpr#3\relax}\fi}
\def\gensure#1#2#3\relax{\ifdim#3#2#1 \global#1{\dimexpr#3\relax}\fi}

\def\ensurecs #1#2#3\relax{\ifdim#3#2#1 \def#1{\dimexpr#3\relax}\fi}
\def\eensurecs#1#2#3\relax{\ifdim#3#2#1 \edef#1{\dimexpr#3\relax}\fi}
\def\gensurecs#1#2#3\relax{\ifdim#3#2#1 \gdef#1{\dimexpr#3\relax}\fi}
\def\xensurecs#1#2#3\relax{\ifdim#3#2#1 \xdef#1{\dimexpr#3\relax}\fi}

%>>

%<< [· Split key=val into macros ·············] >>

%D macros \toolboxunpack
%D
%D Example:
%D
%D \toolboxunpack{key}
%D         ==> \edef\@@key={key}, \def\@@value{}
%D
%D \toolboxunpack{key=value}
%D         ==> \edef\@@key={key}, \def\@@value{value}

\def\toolboxunpack#1{%
  \toolbox@unpack#1=\pgfkeysnovalue=\toolbox@stop}

\long\def\toolbox@unpack#1=#2=#3\toolbox@stop{%
  \begingroup
  \pgfkeys@spdef\@@key{#1}%
  \xdef\@@key{\@@key}%
  \ifx\@@key\pgfkeys@empty
    % skip
  \else%
    \pgfkeys@spdef\@@value{#2}%
    \xdef\@@value{\@@value}%
    \ifx\@@value\pgfkeysnovalue@text% Hmm... no value
      \let\pgfutil@empty
    \fi%
  \fi\endgroup}

%>>
%<< [· Arguments control ·····················] >>

%D macros \expandonearg,
%D        \expandtwoargs,
%D        \expanded
%D
%D Does a once expansion of its first argument and its first two
%D arguments respectively. \expanded does a full expansion of its
%D argument except the first token respectively.
%D
%D Example:
%D
%D \expandonearg\command{arg}% a macro MUST be given between {}
%D         ==> \command{<arg expanded once>}
%D
%D \expandtwoargs\command{argone}{argtwo}
%D         ==> \command{<argone expanded once>}{<argtwo expanded once>}
%D
%D \expanded{\command...anything...}
%D         ==> \command<...anything... fully expanded>

\def\expandonearg#1{\@EA#1\@EA}

\def\expandtwoargs#1#2#3{% don't use \@EAEAEA, it will get expanded
  \@EAEAEA#1\@EA\@EA\@EA{\@EA#2\@EA}\@EA{#3}}

\def\expanded#1{\edef\@@expanded{\@NX#1}\@@expanded}


%D macros \dosingleempty,
%D        \dodoubleempty
%D
%D Example:
%D
%D \def\command{\dosingleempty\docommand}
%D \def\docommand[#1]#2{}
%D
%D \command{no optionnal argument}
%D         ==> \iffirstargument=\iffalse
%D
%D \command[optionnal]{optionnal argument}
%D         ==> \iffirstargument=\iftrue
%D
%D         ————————————————————————
%D
%D \def\command{\dodoubleempty\docommand}
%D \def\docommand[#1][#2]{}
%D
%D \command
%D         ==> \iffirstargument  == \iffalse,
%D             \ifsecondargument == \iffalse
%D
%D \command[one]
%D         ==> \iffirstargument  == \iftrue
%D             \ifsecondargument == \iffalse
%D
%D \command[one][two]
%D         ==> \iffirstargument  == \iftrue
%D             \ifsecondargument == \iftrue

\def\dosingleempty#1%
  {\doifnextoptionalelse
     {\firstargumenttrue#1}%
     {\dosinglefakeempty#1}}

\def\dodoubleempty#1%
  {\doifnextoptionalelse
     {\dodoubletestempty#1}%
     {\dodoublefakeempty#1}}

\def\dosinglefakeempty#1%
  {\firstargumentfalse#1[]}

\def\dodoublefakeempty#1%
  {\firstargumentfalse\secondargumentfalse#1[][]}

\long\def\dodoubletestempty#1[#2]%
  {\firstargumenttrue
   \doifnextoptionalelse
     {\secondargumenttrue #1[{#2}]}%
     {\secondargumentfalse#1[{#2}][]}}

\newif\iffirstargument
\newif\ifsecondargument

%>>

%<< [· Easy parameters management ············] >>

%D pgfkeys handlers to store a key in a macro named by a string.

\def\setvalue     #1{\@EA \def\csname#1\endcsname}
\def\setgvalue    #1{\@EA\gdef\csname#1\endcsname}
\def\setevalue    #1{\@EA\edef\csname#1\endcsname}
\def\setxvalue    #1{\@EA\xdef\csname#1\endcsname}

\def\letvalue     #1{\@EA\let\csname#1\endcsname}
\def\letgvalue    #1{\global\@EA\let\csname#1\endcsname}

\def\resetvalue   #1{\@EA\let\csname#1\endcsname\empty}
\def\ignorevalue#1#2{\@EA\let\csname#1\endcsname\empty}

\def\getvalue     #1{\csname#1\endcsname}

\def\copyvalue#1#2#3%
  {\@EA\def\csname#1#3\endcsname{\csname#2#3\endcsname}}


%D macros \declareparameters
%D        \getparameters
%D        \geteparameters
%D        \dodoubleargumentwithset
%D
%D Example
%D
%D \declareparameters
%D \getparameters
%D \geteparameters

\def\@@prefix{}

\newcommand\declareparameters[1][]{%
  \pgfqkeys{/parameters}{declare family=#1}% set \@@prefix too
  \pgfqkeys{/parameters}}

\newcommand\getparameters[1][]{%
  \pgfqkeys{/parameters}{prefix=#1}% set \@@prefix
  \pgfqkeys{/parameters\if @#1@\else/#1\fi}}

\newcommand\geteparameters[1][]{%
  \pgfqkeys{/eparameters}{prefix=#1}% set \@@prefix
  \pgfqkeys{/eparameters\if @#1@\else/#1\fi}}

\def\dodoubleargumentwithset#1[#2][#3]{%
  \def\acme@@process##1{#1[##1][#3]}%
  \processcommalist[#2]\acme@@process
  \ignorespaces}

%>>
%<< [· Get parameters without checking ·······] >>

\newcommand\getrawparameters[1][]{%
  \pgfqkeys{/parameters}{prefix=#1}% set \@@prefix
  \pgfqkeys{/parameters}}

\newcommand\getraweparameters[1][]{%
  \pgfqkeys{/eparameters}{prefix=#1}% set \@@prefix
  \pgfqkeys{/eparameters}}

\def\copyrawparameters[#1]#2[#3]#4[#5]{% to=#1, from=#3, parameters=#5
  \def\doit{\copyvalue{#1}{#3}}%
  \processcommalist[#5]\doit}

%>>

%<< [· Boxes manipulations ···················] >>

\ifx\nextbox\undefined \newbox\nextbox \fi

\long\def\dowithnextbox#1%
  {\long\def\dodowithnextbox{#1}%
   \afterassignment\dododowithnextbox
   \setbox\nextbox}

\def\dododowithnextbox
  {\aftergroup\dodowithnextbox}

\long\def\dowithnextboxcs#1%
  {\let\dodowithnextbox#1%
   \afterassignment\dododowithnextbox
   \setbox\nextbox}

\def\nextboxht{\ht\nextbox}
\def\nextboxwd{\wd\nextbox}
\def\nextboxdp{\dp\nextbox}

\def\flushnextbox{\box\nextbox}

%>>
%<< [· Put some space around boxes ···········] >>

% constants
\def\const@on{on}
\def\const@off{off}
\def\const@true{true}
\def\const@false{false}
\def\const@fit{fit}

% was the parameter numeric?
\newif\if@nwd
\newif\if@nht
\newif\if@ndp

%D macros \boxcontent
%D
%D Put some content into a box.

\declareparameters[boxcontent]{%
  parameters=align,
  dimensions={width, height}}

\def\boxcontent{\begingroup
  \dosingleempty\doboxcontent}

\def\noboxcontent{\begingroup
  \let\flushnextbox\@empty
  \dosingleempty\doboxcontent}

\long\def\doboxcontent[#1]#2#3{%
  \getparameters [boxcontent]
    {align=, width=-\maxdimen, height=-\maxdimen, #1}
  \setbox\nextbox=#2{#3}%
  \scratchtoken{#3}%
  \doboxcontentindeed}

\def\doboxcontentindeed{%
  \global\setbox\nextbox=\vbox
    \doifpositiveelse\boxcontentheight% [·height·]
      {to \boxcontentheight}{} {% start vbox
      \doifpositiveelse\boxcontentwidth% [·width·]
        {\hsize=\boxcontentwidth}%
        {\hsize=\nextboxwd}%
      \boxcontentalign\the\scratchtoken}%
  \setlencs\boxcontentwidth\nextboxwd%
  \setlencs\boxcontentheight\nextboxht%
  \flushnextbox\endgroup\ignorespaces}


%D macro \surroundbox
%D
%D Put *things* arround a box.

\declareparameters[surroundbox]{%
  parameters={left, right, top, bottom},
  dimensions={width, height},
  % fine tuning needs explicit prefix
  surroundbox,
  % placement of text inside box
  north/.style={left=\hss, right=\hss, bottom=\vss},
  south/.style={left=\hss, right=\hss, top=\vss},
  west/.style={right=\hss, top=\vss, bottom=\vss},
  east/.style={left=\hss, top=\vss, bottom=\vss},
  north west/.style={right=\hss, bottom=\vss},
  south west/.style={right=\hss, top=\vss},
  north east/.style={left=\hss, bottom=\vss},
  south east/.style={left=\hss, top=\vss},
  center/.style={left=\hss, right=\hss, top=\vss, bottom=\vss}}

\def\surroundbox{\dosingleempty\dosurroundbox}
\def\dosurroundbox[#1]{%
  \getparameters [surroundbox]
    {width=-\maxdimen, height=-\maxdimen,
     left=, right=, top=, bottom=, #1}
  \futurelet\nexttoken\dodosurroundbox}

\def\dodosurroundbox{%
  \ifx\nexttoken\box
    \def\next{\afterassignment\dosurroundboxindeed\setbox\nextbox=}%
  \else
    \def\next{\dowithnextbox\dosurroundboxindeed}%
  \fi\next}

\def\dosurroundboxindeed{%
  \global\setbox\nextbox=
    \flushnextbox%todo: WTF?
  \vbox \doifpositiveelse\surroundboxheight% [·height·]
      {to \surroundboxheight}{} {% start vbox
      \surroundboxtop
      \hbox \doifpositiveelse\surroundboxwidth% [·width·]
              {to \surroundboxwidth}{}{%
        \surroundboxleft\box\nextbox\surroundboxright}%
      \surroundboxbottom}\ignorespaces}

%>>

%<< [· Framed text   (use \hbox) ·············] >>

% % new box to manipulate
% \newbox\framedbox

% \def\framedboxwd{\wd\framedbox}
% \def\framedboxht{\ht\framedbox}
% \def\framedboxdp{\dp\framedbox}

% % parameters

% \pgfkeys{/acme/framed/.cd,
%   %% parameters below %%
%   .parameters={
%     left, right, top, bottom,
%     leftframe, rightframe, topframe, bottomframe},
%   tikzoptions/.estore in=\acmeframedtikzoptions,
%   %% dimensions below %%
%   .dimensions={
%     width,  minwidth,  maxwidth,
%     height, minheight, maxheight,
%     leftmargin, rightmargin, topmargin, bottommargin,
%     leftoffset, rightoffset, topoffset, bottomoffset}}


% \pgfkeys{/acme/framed/.cd,
%   % [·some aliases·]
%   margin/.style={
%     leftmargin=#1, rightmargin=#1, topmargin=#1, bottommargin=#1},
%   offset/.style={
%     leftoffset=#1, rightoffset=#1, topoffset=#1, bottomoffset=#1},
%   % [·frame·]
%   leftframe/.is choice,
%   leftframe/on/.code=\def\acmeframedleftframe@@
%     {\path [draw] (0,0) -- ++(0,-\framedboxht);}%
%     \let\acmeframedleftframe\c@@on,
%   leftframe/off/.code=
%     \let\acmeframedleftframe@@\@empty
%     \let\acmeframedleftframe\c@@off,
%   %
%   rightframe/.is choice,
%   rightframe/on/.code=\def\acmeframedrightframe@@
%     {\path [draw] (\framedboxwd,0) -- ++(0,-\framedboxht);}%
%     \let\acmeframedrightframe\c@@on,
%   rightframe/off/.code=\let\acmeframedrightframe@@\@empty
%     \let\acmeframedrightframe\c@@off,
%   %
%   topframe/.is choice,
%   topframe/on/.code=\def\acmeframedtopframe@@
%     {\path [draw] (0,0) -- ++(\framedboxwd,0);}%
%     \let\acmeframedtopframe\c@@on,
%   topframe/off/.code=\let\acmeframedtopframe@@\@empty
%     \let\acmeframedtopframe\c@@off,
%   %
%   bottomframe/.is choice,
%   bottomframe/on/.code=\def\acmeframedbottomframe@@
%     {\path [draw] (0,-\framedboxht) -- ++(\framedboxwd,0);}%
%     \let\acmeframedbottomframe\c@@on,
%   bottomframe/off/.code=\let\acmeframedbottomframe@@\@empty
%     \let\acmeframedbottomframe\c@@off,
%   %
%   frame/.is choice,
%   frame/on/.code=\def\acmeframedframe@@
%     {\path [draw] (0,0) rectangle ++(\framedboxwd,-\framedboxht);},
%   frame/on/.append style=
%     {leftframe=on,  rightframe=on,  topframe=on,  bottomframe=on},
%   frame/off/.code=\let\acmeframedframe@@\@empty,
%   frame/off/.append style={
%     leftframe=off,  rightframe=off,  topframe=off,  bottomframe=off},
%   customframe/.code=\def\acmeframedcustomframe@@{#1},
%   % [·background·]
%   background/.is choice,
%   background/on/.code=\def\acmeframedbackground@@
%     {\path [fill] (0,0) rectangle ++(\framedboxwd,-\framedboxht);},
%   background/off/.code=\let\acmeframedbackground@@\@empty,
%   custombackground/.code=\def\acmeframedcustombackground@@{#1},
%   % [·some additions·]
%   width/.append style={minwidth=#1, maxwidth=#1},
%   height/.append style={minheight=#1, maxheight=#1},
%   % [·alignment·]
%   align/.style={@align/.list={#1}},
%   % [·horizontal alignment·]
%   @align/.is choice,
%   @align/default/.code=\let\acmeframedalign\@empty,
%   @align/right/.code=\let\acmeframedalign\raggedright,
%   @align/left/.code=\let\acmeframedalign\raggedleft,
%   @align/center/.code=\let\acmeframedalign\centering,
%   % [·vertical alignment·]
%   @align/top/.code=
%     \let\acmeframedtop\@empty
%     \let\acmeframedbottom\vss,
%   @align/bottom/.code=
%     \let\acmeframedtop\vss
%     \let\acmeframedbottom\@empty,
%   @align/middle/.code=
%     \let\acmeframedtop\vss
%     \let\acmeframedbottom\vss,
%   @align/flushleft/.style={@align=right},
%   @align/flushright/.style={@align=left}}

% \newdimen\nextdepth

% \def\setupframed{\getparameters[/acme/framed]}

% \def\framed{\dosingleempty\doframed}
% \long\def\doframed[#1]#2{\begingroup
%   \setupframed
%     [frame=on, customframe=false,
%      background=off, custombackground=false,
%      margin=0pt, offset=3pt,
%      width=-\maxdimen, height=-\maxdimen,
%      maxwidth=\hsize,  maxheight=\maxdimen,
%      left=, right=, top=, bottom=,
%      align={default, middle},
%      tikzoptions={draw}, #1]
%   \let\\\newline
%   %% —————————————————————————————————————————————————— %%
%   % [·adjust size of text: width·]
%   \doifnotvaliddimension\acmeframedwidth{%
%     \noboxcontent\hbox{#2}%
%     \evalasdimen\acmeframedwidth
%       {\boxcontent@@width+\acmeframedleftoffset+\acmeframedrightoffset}}%
%   \normalizeabove\acmeframedwidth\acmeframedminwidth
%   \normalizebelow\acmeframedwidth\acmeframedmaxwidth
%   \evalasdimen\acmeframedwidth
%     {\acmeframedwidth-\acmeframedleftoffset-\acmeframedrightoffset}%
%   \noboxcontent[width=\acmeframedwidth, align=\acmeframedalign]
%     \hbox{\hsize=\acmeframedwidth#2}
%   % [·adjust size of text: height·]
%   \doifnotvaliddimension\acmeframedheight{%
%     \evalasdimen\acmeframedheight
%       {\boxcontent@@height+\acmeframedtopoffset}}%
%   \normalizeabove\acmeframedheight\acmeframedminheight
%   \normalizebelow\acmeframedheight\acmeframedmaxheight
%   % [·tight box around text·]
%   \evalasdimen\acmeframedheight
%     {\acmeframedheight-\acmeframedtopoffset}%
%   %% —————————————————————————————————————————————————— %%
%   \surroundbox
%     [width=
%       \acmeframedwidth+\acmeframedleftoffset+\acmeframedrightoffset,
%      height=
%       \acmeframedheight+\acmeframedtopoffset+\acmeframedbottomoffset,
%      left=\kern\acmeframedleftoffset\acmeframedleft,
%      right=\acmeframedright\kern\acmeframedrightoffset,
%      top=\kern\acmeframedtopoffset\acmeframedtop,
%      bottom=\acmeframedbottom\kern\acmeframedbottomoffset]\box\nextbox
%   \setbox\framedbox=\box\nextbox
%   %% —————————————————————————————————————————————————— %%
%   \setbox\nextbox=\hbox{%
%     \expandonearg\tikzpicture[\acmeframedtikzoptions]
%       \path [use as bounding box] (0,0)
%         rectangle ++(\framedboxwd,-\framedboxht);
%       % [·four sides ==> one rectangle·]
%       \ifx\acmeframedcustombackground@@\c@@false
%           \acmeframedbackground@@
%         \else
%           \acmeframedcustombackground@@
%       \fi
%       \ifx\acmeframedleftframe\c@@on
%       \ifx\acmeframedrightframe\c@@on
%       \ifx\acmeframedtopframe\c@@on
%       \ifx\acmeframedbottomframe\c@@on
%         \let\acmeframedleftframe@@\@empty
%         \let\acmeframedrightframe@@\@empty
%         \let\acmeframedtopframe@@\@empty
%         \let\acmeframedbottomframe@@\@empty
%         \ifx\acmeframedcustomframe@@\c@@false
%           \acmeframedframe@@
%         \else
%           \acmeframedcustomframe@@\fi
%       \fi\fi\fi\fi%
%       \acmeframedleftframe@@ \acmeframedrightframe@@
%       \acmeframedtopframe@@  \acmeframedbottomframe@@
%       \node [anchor=north west, inner sep=0pt, outer sep=0pt]
%         at (0,0) {\box\framedbox};
%   \endtikzpicture}%
%   \surroundbox[%
%     left=\kern\acmeframedleftmargin, right=\kern\acmeframedrightmargin,
%     top=\kern\acmeframedtopmargin, bottom=\kern\acmeframedbottommargin]%
%     \box\nextbox
%   \box\nextbox
%   \global\nextdepth=\dimexpr\framedboxdp
%                             +\acmeframedbottomoffset
%                             +\acmeframedbottommargin\relax
%   \endgroup}

%>>
%<< [· Framed text   (use \vbox) ·············] >>

% \newenvironment{framedtext}[1][]
% {\begingroup
%  \def\acmeframedtextoptions{width=\hsize, #1}%
%  \setupframed
%    [frame=on, customframe=false, background=off,
%     margin=0pt, offset=3pt,
%     width=\hsize, height=-\maxdimen, maxheight=\maxdimen,
%     left=, right=, top=, bottom=,
%     align={default, middle},
%    tikzoptions={draw}, #1]
%  \setbox\nextbox\vbox\bgroup
%    \hsize=\dimexpr\acmeframedwidth-\acmeframedleftoffset
%                                   -\acmeframedrightoffset\relax
%    \acmeframedalign\ignorespaces}
% {\egroup
%  \leavevmode
%  \expandonearg\framed[\acmeframedtextoptions]{\box\nextbox}%
%  \endgroup}


% %>>
% %<< [· Inframed text (use \hbox) ·············] >>

% \def\strutdp{\dp\strutbox}
% \def\strutht{\ht\strutbox}
% \def\strutwd{\wd\strutbox}

% \def\insidestrut{%
%   \vrule height\dimexpr\strutht-\acmeframedtopoffset\relax
%          depth\dimexpr\strutdp-\acmeframedbottomoffset\relax
%          width0pt}

% \def\inframe{\dosingleempty\doinframe}
% \def\doinframe[#1]#2{%
%   \setbox\nextbox=\vbox{%
%     \framed[offset=2pt, bottomoffset=\strutdp,
%             leftmargin=-1pt, rightmargin=-1pt,
%             tikzoptions={draw, fill}, #1]
%     {\insidestrut#2}}%
%   \raisebox{-\nextdepth}{\box\nextbox}}

%>>

%<< [· Vertical spacing made easy ············] >>

\declareparameters[blank]{%
  % prefix added automatically for standard usages:
  % (e)store(s), dimension(s), number(s)
  dimension=@blank,% /parameters/blank/@blank to store arg evaluated as dimension
  % fine tuning needs explicit prefix first
  blank,% also /parameters/blank(/.cd)
  .is choice,
  small/.style={@blank=\smallskipamount},
  medium/.style={@blank=\medskipamount},
  big/.style={@blank=\bigskipamount},
  half/.style={@blank=.5\baselineskip},
  line/.style={@blank=\baselineskip},
  .unknown/.style={@blank=\pgfkeyscurrentname}}

\def\setlen#1#2{#1=\dimexpr#2\relax}

\newcommand\blank[1][line]{%
  \scratchdimen0pt
  \def\doit##1{%
    \splitatstar{##1}%
    \getparameters[blank]{\@dimen}%
    \setlen\scratchdimen{\scratchdimen+\blank@blank*\@count}}
  \processcommalist[#1]\doit
  \vskip\scratchdimen}

\def\splitatstar#1{%
  \doifinstringelse{*}{#1}
    {\blanksplit#1\blanksplit}
    {\blanksplit1*#1\blanksplit}}

\def\blanksplit#1*#2\blanksplit{%
  \def\@count{#1}\def\@dimen{#2}}

%>>
%<< [· Commands or switch macros ·············] >>

\long\def\HandleGroup#1#2%
  {\bgroup
   \long\def\BeforeGroup{\bgroup#1\bgroup\aftergroup\AfterGroup}%
   \long\def\AfterGroup {#2\egroup\egroup}%
   \afterassignment\BeforeGroup
   \let\next=}

\long\def\HandleSimpleGroup#1#2% no inner group (so no kerning interference)
  {\bgroup
   \long\def\BeforeGroup{\bgroup\aftergroup\AfterGroup#1}%
   \long\def\AfterGroup {#2\egroup}%
   \afterassignment\BeforeGroup
   \let\next=}

\long\def\HandleNoGroup#1#2%
  {\long\def\AfterGroup{#2\egroup}%
   \bgroup\aftergroup\AfterGroup#1}

\long\def\groupedcommand#1#2%
  {\doifnextbgroupelse{\HandleGroup{#1}{#2}}{\HandleNoGroup{#1}{#2}}}

\long\def\simplegroupedcommand#1#2%
  {\doifnextbgroupelse{\HandleSimpleGroup{#1}{#2}}{\HandleNoGroup{#1}{#2}}}

%>>

%<< * \definelanguageswitch                     >>

\def\definelanguageswitch{\dotripleempty\dodefinelanguageswitch}
\def\dodefinelanguageswitch[#1][#2][#3]{%
  \ifthirdargument
    \@EA\def\csname#2\endcsname{\simplegroupedcommand{\selectlanguage{#1}#3}{}}
  \else
    \@EA\def\csname#1\endcsname{\simplegroupedcommand{\selectlanguage{#1}#2}{}}
  \fi}

%>>


%%% Local Variables:
%%% TeX-master: "./demo.tex"
%%% End:
