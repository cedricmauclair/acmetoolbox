% Time-stamp: <2011-06-20 15:51:22 cmauclai>
%
% Copyright 2010 by Cedric Mauclair
%
% This file may be distributed and/or modified according to the
% following licences:
%
% 1. CCPL Attribution-ShareAlike License
%    (http://creativecommons.org/licenses/by-sa/3.0/legalcode)
% 2. GNU Public License 3
%    (http://www.gnu.org/licenses/gpl.html)
%
%         ————————————————————————————————————————————————————
%
% Latest major version: 1.0
% Date: 2011-02-04
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% General purpose tools for LaTeX (c) Cedric Mauclair, 2011.
%   * ideas and/or snippets borrowed from ConTeXt
%   * ideas and/or snippets borrowed from pgf
%
%   [2011-03-02] Version: 0.1 -- First release.
%   [2011-04-02] Version: 1.0 -- First functionnal release.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\ProvidesPackage{acmetoolbox}[2011/02/04 Usefull LaTeX macros]


%<< [· Some requirements ·····················] >>

\RequirePackage{pgfkeys, pgffor, acmepkh, tikz}

\pgfdeclarelayer{background}
\pgfdeclarelayer{foreground}
\pgfsetlayers{background,main,foreground}

\def\const@yes{yes}
\def\const@no{no}

%>>

%<< [· Usefull shortcuts ·····················] >>

\let\@NX\noexpand
\let\@EA\expandafter
\def\@EAEAEA{\expandafter\expandafter\expandafter}

%>>
%<< [· Usefull \doif...else ··················] >>

%D macros \doifnextcharelse,
%D        \doifnextoptionnalelse,
%D        \doifnextbgroupelse
%D
%D Example:
%D
%D \doifnextcharelse[{\command}{\command[<default args>]}

\let\doifnextcharelse     \pgfutil@ifnextchar
\def\doifnextoptionalelse {\doifnextcharelse[}
\def\doifnextbgroupelse   {\doifnextcharelse\bgroup}


%D macros \doifinstringelse,
%D        \doifassingmentelse
%D
%D Example:
%D
%D \doifinstringelse{=}{arg}{key/value list}{simple list}% no equal signs
%D \doifassingmentelse{arg}{key/value list}{simple list} % no equal signs

\def\doifinstringelse#1#2#3#4{%
  \pgfutil@in@{#1}{#2}%
  \ifpgfutil@in@#3\else#4\fi}
\def\doifassignmentelse{\doifinstringelse{=}}


%D macros \doifdimensionelse
%D        \doifpositive
%D        \doifnegative
%D
%D Example:
%D
%D \doifdimensionelse{\mydim>0pt}{this}{or that}
%D \doifpositive\mydim{this}
%D \doifnegative\mydim{or that}

\long\def\doifdimensionelse#1#2#3{\ifdim#1#2\else#3\fi}
\long\def\doifpositive     #1#2{\doifdimensionelse{#1>0pt}{#2}{}}
\long\def\doifnegative     #1#2{\doifdimensionelse{#1>0pt}{}{#2}}

%>>
%<< [· Usefull loop features ·················] >>

%D macros \processcommalist
%D
%D Example:
%D
%D \def\print#1{(#1)}
%D \processcommalist[one, two, three=four]\print
%D         ==> (one)(two)(three=four)

\def\processcommalist[#1]#2{%
  \pgfqkeys{/processcommalist}{.code=#2{##1}, .list={#1}}}

%>>
%<< [· Usefull macros ························] >>

%D macros \setlen,
%D        \gsetlen,
%D        \setlencs,
%D        \gsetlencs
%D
%D Useful to set length and macros to expand to lengths.
%D Prefix with 'g' to set globally.
%D
%D Example:
%D
%D \newdimen\somelength% required, register must exist
%D \setlen\somelength{12pt+3pt}  --> \the\somelength = 15pt
%D
%D \def\somemacro{}% optionnal
%D \setlencs\somemacro{12pt+3pt} --> \somemacro = 15pt

\def\setlen#1#2{#1\dimexpr#2\relax\ignorespaces}
\def\gsetlen#1#2{\global#1\dimexpr#2\relax\ignorespaces}

\def\setlencs #1#2{%
  \scratchdimen\dimexpr#2\relax
  \@EA\def\@EA#1\@EA{\the\scratchdimen}%
  \ignorespaces}
\def\gsetlencs#1#2{%
  \scratchdimen\dimexpr#2\relax
  \@EA\gdef\@EA#1\@EA{\the\scratchdimen}%
  \ignorespaces}


%D macros \ensure,
%D        \ensurecs
%D
%D Useful to ensure length are bounded.
%D Prefix with 'g' to set globally.
%D
%D Example:
%D
%D \newdimen\somelength% required, register must exist
%D \setlen\somelength{12pt+3pt}  --> \the\somelength = 15pt
%D \ensure\somelength<{12pt+1pt} --> \the\somelength = 13pt
%D                   means less or equal actually
%D
%D \def\somemacro{15pt}
%D \ensurecs\somemacro<13pt      --> \somemacro = 13pt

\def\ensure #1#2#3\relax{%
  \ifdim#3#2#1 #1{\dimexpr#3\relax}\fi\ignorespaces}
\def\gensure#1#2#3\relax{%
  \ifdim#3#2#1 \global#1{\dimexpr#3\relax}\fi\ignorespaces}

\def\ensurecs #1#2#3\relax{%
  \ifdim#3#2#1
    \scratchdimen#3
    \@EA\def\@EA#1\@EA{\the\scratchdimen}\fi
  \ignorespaces}
\def\gensurecs#1#2#3\relax{%
  \ifdim#3#2#1
    \scratchdimen#3
    \@EA\gdef\@EA#1\@EA{\the\scratchdimen}\fi
  \ignorespaces}

%>>

%<< [· Split key=val into macros ·············] >>

%D macros \splitkeyval
%D
%D Example:
%D
%D \splitkeyval{key}
%D         ==> \edef\@@key={key}, \def\@@value{}
%D
%D \splitkeyval{key=value}
%D         ==> \edef\@@key={key}, \def\@@value{value}

\def\splitkeyval#1{%
  \dosplitkeyval#1=\pgfkeysnovalue=\splitkeyval}

\long\def\dosplitkeyval#1=#2=#3\splitkeyval{%
  \begingroup
  \pgfkeys@spdef\@@key{#1}%
  \xdef\@@key{\@@key}%
  \ifx\@@key\pgfkeys@empty
    % skip
  \else%
    \pgfkeys@spdef\@@value{#2}%
    \xdef\@@value{\@@value}%
    \ifx\@@value\pgfkeysnovalue@text% Hmm... no value
      \let\pgfutil@empty
    \fi%
  \fi\endgroup}

%>>
%<< [· Arguments control ·····················] >>

%D macros \expandonearg,
%D        \expandtwoargs,
%D        \expanded
%D
%D Does a expansion of its first argument and its first two arguments
%D respectively. \expanded does a full expansion of its argument except
%D the first token.
%D
%D Example:
%D
%D \expandonearg\command{arg}% a macro MUST be given between {}
%D         ==> \command{<arg expanded once>}
%D
%D \expandtwoargs\command{argone}{argtwo}
%D         ==> \command{<argone expanded once>}{<argtwo expanded once>}
%D
%D \expanded{\command...anything...}
%D         ==> \command<...anything... fully expanded>

\def\expandonearg#1{\@EA#1\@EA}

\def\expandtwoargs#1#2#3{% don't use \@EAEAEA, it will get expanded
  \@EAEAEA#1\@EA\@EA\@EA{\@EA#2\@EA}\@EA{#3}}

\def\expanded#1{\edef\@@expanded{\@NX#1}\@@expanded}


%D macros \dosingleempty,
%D        \dodoubleempty
%D
%D Example:
%D
%D \def\command{\dosingleempty\docommand}
%D \def\docommand[#1]{...}
%D
%D \command{no optionnal argument}
%D         ==> \iffirstargument=\iffalse
%D
%D \command[optionnal]{optionnal argument}
%D         ==> \iffirstargument=\iftrue
%D
%D         ————————————————————————
%D
%D \def\command{\dodoubleempty\docommand}
%D \def\docommand[#1][#2]{}
%D
%D \command
%D         ==> \iffirstargument  == \iffalse,
%D             \ifsecondargument == \iffalse
%D
%D \command[one]
%D         ==> \iffirstargument  == \iftrue
%D             \ifsecondargument == \iffalse
%D
%D \command[one][two]
%D         ==> \iffirstargument  == \iftrue
%D             \ifsecondargument == \iftrue

\def\dosingleempty#1%
  {\doifnextoptionalelse
     {\firstargumenttrue#1}%
     {\dosinglefakeempty#1}}

\def\dodoubleempty#1%
  {\doifnextoptionalelse
     {\dodoubletestempty#1}%
     {\dodoublefakeempty#1}}

\def\dosinglefakeempty#1%
  {\firstargumentfalse#1[]}

\def\dodoublefakeempty#1%
  {\firstargumentfalse\secondargumentfalse#1[][]}

\long\def\dodoubletestempty#1[#2]%
  {\firstargumenttrue
   \doifnextoptionalelse
     {\secondargumenttrue #1[{#2}]}%
     {\secondargumentfalse#1[{#2}][]}}

\newif\iffirstargument
\newif\ifsecondargument

%>>

%<< [· Easy parameters management ············] >>

\def\setvalue  #1{\@EA \def\csname#1\endcsname}
\def\setgvalue #1{\@EA\gdef\csname#1\endcsname}
\def\setevalue #1{\@EA\edef\csname#1\endcsname}
\def\setxvalue #1{\@EA\xdef\csname#1\endcsname}

\def\letvalue  #1{\@EA\let\csname#1\endcsname}
\def\letgvalue #1{\global\@EA\let\csname#1\endcsname}

\def\resetvalue   #1{\@EA\let\csname#1\endcsname\empty}
\def\ignorevalue#1#2{\@EA\let\csname#1\endcsname\empty}

\def\getvalue  #1{\csname#1\endcsname}

\def\copyvalue#1#2#3%
  {\@EA\def\csname#1#3\endcsname{\csname#2#3\endcsname}}


%D macros \declareparameters,
%D        \getparameters,
%D        \geteparameters,
%D        \dodoubleargumentwithset
%D
%D Example
%D
%D \declareparameters[prefix]{echo/.append to=\echo,
%D                            echo/.append code=#1+}
%D \defaultsep{, }
%D \getparameters[prefix]{echo=one, echo=two, echo=three}
%D   --> outputs 'one+two+three+' in document
%D   --> \echo = one, two, three
%D
%D \def\toto{toto}
%D \geteparameters[prefix][tata=\toto]
%D \def\toto{tata}
%D   --> \prefixtata = toto (expanded at definition)

\def\@@prefix{}

\newcommand\declareparameters[2][]{%
  \pgfqkeys{/parameters}{declare family=#1}% set \@@prefix
  \pgfqkeys{/parameters}{#2}\ignorespaces}%  use \@@prefix in definition

\newcommand\getparameters[2][]{%
  \pgfqkeys{/parameters}{prefix=#1}% set \@@prefix
  \pgfqkeys{/parameters\if @#1@\else/#1\fi}{#2}\ignorespaces}

\newcommand\geteparameters[2][]{%
  \pgfqkeys{/eparameters}{prefix=#1}% set \@@prefix
  \pgfqkeys{/eparameters\if @#1@\else/#1\fi}{#2}\ignorespaces}

\def\dodoubleargumentwithset#1[#2][#3]{%
  \def\doit##1{#1[##1][#3]}%
  \processcommalist[#2]\doit
  \ignorespaces}

%>>
%<< [· Get parameters without checking ·······] >>

%D macros \getrawparameters,
%D        \getraweparameters,
%D        \copyrawparameters
%D
%D Same as above, but does not check for existing keys.

\newcommand\getrawparameters[1][]{%
  \pgfqkeys{/parameters}{prefix=#1}% set \@@prefix
  \pgfqkeys{/parameters}}

\newcommand\getraweparameters[1][]{%
  \pgfqkeys{/eparameters}{prefix=#1}% set \@@prefix
  \pgfqkeys{/eparameters}}

\def\copyrawparameters[#1]#2[#3]#4[#5]{% to=#1, from=#3, parameters=#5
  \def\doit{\copyvalue{#1}{#3}}%
  \processcommalist[#5]\doit}

%>>

%<< [· Boxes manipulations ···················] >>

\ifx\nextbox\undefined \newbox\nextbox \fi

\long\def\dowithnextbox#1%
  {\long\def\dododowithnextbox{#1}%
   \afterassignment\dodowithnextbox
   \setbox\nextbox}

\def\dodowithnextbox
  {\aftergroup\dododowithnextbox}

\long\def\dowithnextboxcs#1%
  {\let\dododowithnextbox#1%
   \afterassignment\dodowithnextbox
   \setbox\nextbox}

\def\nextboxht{\ht\nextbox}
\def\nextboxwd{\wd\nextbox}
\def\nextboxdp{\dp\nextbox}

\def\flushnextbox{\box\nextbox}

%>>
%<< [· Put some space around boxes ···········] >>

% helpers
\def\onlypositivelength#1{\doifpositive#1{to #1}}
\def\onlypositivehsize #1{\doifpositive#1{\hsize=#1}}

%D macros \emboxit
%D
%D Put some content into a box.

\declareparameters[emboxit]{%
  parameters={align},         % accept anything
  dimensions={width, height}, % accept only valid dimensions
  % fine tuning needs explicit prefix
  emboxit,
  % start in vmode or not, default is 'yes'
  vmode/.default=yes,         % accept 'yes/no' or 'true/false'
  vmode/.is choice,
  vmode/yes/.code=\emboxitvmodetrue,
  vmode/no/.code=\emboxitvmodefalse,
  % compatibility
  vmode/true/.style={vmode=yes},
  vmode/false/.style={vmode=no},
  % be symmetric
  hmode/.default=yes,         % accept 'yes/no' or 'true/false'
  hmode/.is choice,
  hmode/yes/.style={vmode=no},
  hmode/no/.style={vmode=yes},
  hmode/true/.style={vmode=no},
  hmode/false/.style={vmode=yes}}

\newif\ifemboxitvmode

\def\emboxit{\dosingleempty\doemboxit}
\long\def\doemboxit[#1]{%
  \getparameters [emboxit]
    {vmode, align=, width=-1pt, height=-1pt, #1}%
  \afterassignment\dodoemboxit\scratchtoken}

\def\dodoemboxit{%
  \setbox\nextbox=\vbox
    \onlypositivelength\emboxitheight{% [·height·]
      \onlypositivehsize\emboxitwidth% [·width·]
      \ifemboxitvmode\else\leavevmode\fi
      \emboxitalign\the\scratchtoken}%
  \setlencs\emboxitwidth\nextboxwd
  \setlencs\emboxitheight\nextboxht
  \ignorespaces}


%D macro \wrapit
%D
%D Embox content then put *things* arround it.

\declareparameters[wrapit]{%
  parameters={align, left, right, top, bottom},    % accept anything
  dimensions={width, height, allwidth, allheight}, % accept only valid dimensions
  % fine tuning needs explicit prefix
  wrapit,
  % start in vmode or not, default is 'yes'
  vmode/.default=yes,                % accept 'yes/no' or 'true/false'
  vmode/.is choice,
  vmode/yes/.code=\emboxitvmodetrue,
  vmode/no/.code=\emboxitvmodefalse,
  vmode/true/.style={vmode=yes},
  vmode/false/.style={vmode=no},
  % be symmetric
  hmode/.default=yes,                % accept 'yes/no' or 'true/false'
  hmode/.is choice,
  hmode/yes/.style={vmode=no},
  hmode/no/.style={vmode=yes},
  hmode/true/.style={vmode=no},
  hmode/false/.style={vmode=yes},
  % placement of text inside box (ie, useful shortcuts)
  north/.style={left=\hss, right=\hss, bottom=\vss},
  south/.style={left=\hss, right=\hss, top=\vss},
  west/.style={right=\hss, top=\vss, bottom=\vss},
  east/.style={left=\hss, top=\vss, bottom=\vss},
  north west/.style={right=\hss, bottom=\vss},
  south west/.style={right=\hss, top=\vss},
  north east/.style={left=\hss, bottom=\vss},
  south east/.style={left=\hss, top=\vss},
  center/.style={left=\hss, right=\hss, top=\vss, bottom=\vss}}

\def\wrapit{\dosingleempty\dowrapit}
\def\dowrapit[#1]{%
  \getparameters [wrapit]
    {vmode, align=, width=-1pt, height=-1pt,
     allwidth=-1pt, allheight=-1pt,
     left=, right=, top=, bottom=, #1}%
  \getparameters [emboxit]
    {align=\wrapitalign, width=\wrapitwidth, height=\wrapitheight}%
  \afterassignment\dodowrapit\scratchtoken}

\def\dodowrapit{%
  \dodoemboxit
  % ensure consistency (if allwidth specified) or adadpt to content
  \doifpositive\wrapitallwidth
    {\ensurecs\wrapitallwidth>\emboxitwidth\relax}%
  % ensure consistency (if allheight specified) or adadpt to content
  \doifpositive\wrapitallheight
    {\ensurecs\wrapitallheight>\emboxitheight\relax}%
  \setbox\nextbox=
  \vbox \onlypositivelength\wrapitallheight{%    [·height·]
      \wrapittop
      \hbox \onlypositivelength\wrapitallwidth{% [·width·]
        \wrapitleft\box\nextbox\wrapitright}%
      \wrapitbottom}\ignorespaces}

%D macro \wrapbox
%D
%D Put *things* arround an existing box.

\declareparameters[wrapbox]{%
  parameters={left, right, top, bottom}, % accept anything
  dimensions={width, height},            % accept only valid dimensions
  % fine tuning needs explicit prefix
  wrapbox,
  % placement of text inside box
  north/.style={left=\hss, right=\hss, bottom=\vss},
  south/.style={left=\hss, right=\hss, top=\vss},
  west/.style={right=\hss, top=\vss, bottom=\vss},
  east/.style={left=\hss, top=\vss, bottom=\vss},
  north west/.style={right=\hss, bottom=\vss},
  south west/.style={right=\hss, top=\vss},
  north east/.style={left=\hss, bottom=\vss},
  south east/.style={left=\hss, top=\vss},
  center/.style={left=\hss, right=\hss, top=\vss, bottom=\vss}}

\def\wrapbox{\dosingleempty\dowrapbox}
\def\dowrapbox[#1]{%
  \getparameters [wrapbox]
    {width=-1pt, height=-1pt,
     left=, right=, top=, bottom=, #1}%
  \futurelet\nexttoken\dodowrapbox}

\def\dodowrapbox{%
  \ifx\nexttoken\box
    \def\next{\afterassignment\dodowrapboxindeed\setbox\nextbox}%
  \else
    \def\next{\dowithnextbox\dodowrapboxindeed}%
  \fi\next}

\def\dodowrapboxindeed{%
  % ensure consistency (if allwidth specified) or adadpt to content
  \doifpositive\wrapboxwidth
    {\ensurecs\wrapboxwidth>\nextboxwd\relax}%
  % ensure consistency (if allheight specified) or adadpt to content
  \doifpositive\wrapboxheight
    {\ensurecs\wrapboxheight>\nextboxht\relax}%
  \setbox\nextbox=
  \vbox \onlypositivelength\wrapboxheight{%    [·height·]
      \wrapboxtop
      \hbox \onlypositivelength\wrapboxwidth{% [·width·]
        \wrapboxleft\box\nextbox\wrapboxright}%
      \wrapboxbottom}\ignorespaces}

%>>

%<< [· Framed text ···························] >>

% new box to manipulate
\newbox\framedbox
\def\framedboxwd{\wd\framedbox}
\def\framedboxht{\ht\framedbox}
\def\framedboxdp{\dp\framedbox}
\def\fbwd{\wd\framedbox}
\def\fbht{\ht\framedbox}
\def\fbdp{\dp\framedbox}

%<< ———— available settings                —————————————— >>

% seperate key values (in 'options' key) with commas.
\defaultsep{,}

\declareparameters[framed@]{%
  parameters={% accept anything
    left, right, top, bottom},
  dimensions={% accept only valid dimension
    width,  minwidth,  maxwidth,
    height, minheight, maxheight,
    leftmargin, rightmargin, topmargin, bottommargin,
    leftoffset, rightoffset, topoffset, bottomoffset},
  % fine tuning needs explicit prefix
  framed@,
  % ———[·~ options ~·]———
  options/.append to=\framed@options,
  % ———[·~ vmode ~·]———
  vmode/.default=yes,
  vmode/.is choice,
  vmode/yes/.code=\let\framed@vmode\const@yes,
  vmode/no/.code=\let\framed@vmode\const@no,
  vmode/true/.style={vmode=yes},
  vmode/false/.style={vmode=no},
  hmode/.default=no,
  hmode/.is choice,
  hmode/yes/.style={vmode=no},
  hmode/no/.style={vmode=yes},
  hmode/true/.style={vmode=no},
  hmode/false/.style={vmode=yes},
  % ———[·~ margins & offsets ~·]———
  margin/.style=
    {leftmargin=#1, rightmargin=#1, topmargin=#1, bottommargin=#1},
  offset/.style=
    {leftoffset=#1, rightoffset=#1, topoffset=#1, bottomoffset=#1},
  % ———[·~ frame ~·]———
  frame/.style={@frame/.list={#1}},
  frame/custom/.code=\def\framed@@framecustom{#1},
  @frame/.is choice, % accept 'clean', 'left', 'right', 'top', 'bottom'
  @frame/clean/.code=
    \let\framed@leftframe\@empty
    \let\framed@rightframe\@empty
    \let\framed@topframe\@empty
    \let\framed@bottomframe\@empty,
  @frame/left/.code=
    \let\framed@leftframe\framed@@leftframe
    \let\framed@frame\@empty,
  @frame/right/.code=
    \let\framed@rightframe\framed@@rightframe
    \let\framed@frame\@empty,
  @frame/top/.code=
    \let\framed@topframe\framed@@topframe
    \let\framed@frame\@empty,
  @frame/bottom/.code=
    \let\framed@bottomframe\framed@@bottomframe
    \let\framed@frame\@empty,
  @frame/on/.code=\def\framed@frame{%
      \ifx\framed@@framecustom\@empty \framed@@frame
      \else                           \framed@@framecustom\fi},
  @frame/on/.prefix style={@frame=clean},
  @frame/off/.code=
    \let\framed@frame\@empty,
  @frame/off/.prefix style={@frame=clean},
  % compatibility
  @frame/true/.style={@frame=on},
  @frame/false/.style={@frame=off},
  % ———[·~ background ~·]———
  background/.is choice,
  background/on/.code=\def\framed@background{%
    \ifx\framed@@backgroundcustom\@empty \framed@@background
    \else                                \framed@@backgroundcustom\fi},
  background/off/.code=\let\framed@background\@empty,
  background/.append code=\def\framed@backgroundstate{#1},
  background/custom/.code=\def\framed@@backgroundcustom{#1},
  % ———[·~ some additions ~·]———
  width/.append style={minwidth=#1, maxwidth=#1},
  height/.append style={minheight=#1, maxheight=#1},
  % ———[·~ horizontal alignment ~·]———
  align/.style={@align/.list={#1}},
  @align/.is choice, % accept 'default', 'center',
                     % 'right/left' (ie raggedright/raggedleft),
                     % 'flushleft/flushright'
  @align/default/.code=\let\framed@align\@empty,
  @align/right/.code=\let\framed@align\raggedright,
  @align/left/.code=\let\framed@align\raggedleft,
  @align/raggedright/.style={@align=right},
  @align/raggedleft/.style={@align=left},
  @align/center/.code=\let\framed@align\centering,
  @align/flushleft/.code=\def\framed@align{\flushleft\removelastskip},
  @align/flushleft/.append style={hmode},
  @align/flushright/.code=\def\framed@align{\flushright\removelastskip},
  @align/flushright/.append style={hmode},
  % ———[·~ vertical alignment ~·]———
  @align/top/.code=
    \let\framed@top\@empty\let\framed@bottom\vss,
  @align/bottom/.code=
    \let\framed@top\vss\let\framed@bottom\@empty,
  @align/middle/.code=
    \let\framed@top\vss\let\framed@bottom\vss,
}

% default frame/background
\def\framed@@leftframe   {\path [draw] (0,0) -- ++(0,-\fbht);}
\def\framed@@topframe    {\path [draw] (0,0) -- ++(\fbwd,0);}
\def\framed@@rightframe  {\path [draw] (\fbwd,0)  -- ++(0,-\fbht);}
\def\framed@@bottomframe {\path [draw] (0,-\fbht) -- ++(\fbwd,0);}
\def\framed@@frame       {\path [draw] (0,0) rectangle ++(\fbwd,-\fbht);}
\def\framed@@background  {\path [fill] (0,0) rectangle ++(\fbwd,-\fbht);}
\let\framed@@framecustom\@empty
\let\framed@@backgroundcustom\@empty

%>>
%<< ———— implementation of the framed text —————————————— >>

\newdimen\nextdepth

\def\setupframed{\getparameters[framed@]}

% command (start in hmode by default)
\def\framed{\dosingleempty\doframed}
\long\def\doframed[#1]#2{\begingroup
  \setupframed
    {frame=on,    background=off, hmode, % start in hmode by default
     margin=0pt,  offset=3pt,
     width=-1pt,  minwidth=-1pt,  maxwidth=\hsize,
     height=-1pt, minheight=-1pt, maxheight=\maxdimen,
     left=, right=, top=, bottom=,
     align={default, middle},
     options={draw, fill=white, thick}, #1}
  %% —————————————————————————————————————————————————— %%
  % [·adjust size of text: width·]
  \doifnegative\framed@width{%
    \setbox\nextbox=\hbox{#2}%
    \setlencs\framed@width{%
      \nextboxwd+\framed@leftoffset+\framed@rightoffset}}%
  \ensurecs\framed@width>\framed@minwidth\relax
  \ensurecs\framed@width<\framed@maxwidth\relax
  \setlencs\framed@width{%
    \framed@width-\framed@leftoffset-\framed@rightoffset}
  \emboxit[vmode=\framed@vmode,
           width=\framed@width,
           align=\framed@align]{#2}
  % [·adjust size of text: height·]
  \doifnegative\framed@height{%
    \setlencs\framed@height{\nextboxht+\framed@topoffset}}%
  \ensurecs\framed@height>\framed@minheight\relax
  \ensurecs\framed@height<\framed@maxheight\relax
  % [·tight box around text·]
  \setlencs\framed@height{\framed@height-\framed@topoffset}
  %% —————————————————————————————————————————————————— %%
  \wrapbox[%
    width=\framed@width+\framed@leftoffset+\framed@rightoffset,
    height=\framed@height+\framed@topoffset+\framed@bottomoffset,
    left=\kern\framed@leftoffset\framed@left,
    right=\framed@right\kern\framed@rightoffset,
    top=\kern\framed@topoffset\framed@top,
    bottom=\framed@bottom\kern\framed@bottomoffset]\box\nextbox
  \setbox\framedbox=\box\nextbox
  %% —————————————————————————————————————————————————— %%
  \setbox\nextbox=\hbox{%
    \expandonearg\tikzpicture[\framed@options]
      \path [use as bounding box] (0,0) rectangle ++(\fbwd,-\fbht);
      % [·'frame=on' is explicit·]
      \ifx\framed@framestate\const@on
        \framed@frame\fi
      % [·four sides ==> full frame·]
      \ifx\framed@leftframe\@empty\else
      \ifx\framed@rightframe\@empty\else
      \ifx\framed@topframe\@empty\else
      \ifx\framed@bottomframe\@empty\else
        \getparameters[framed@]{frame=on}
      \fi\fi\fi\fi
      \framed@background
      \framed@leftframe \framed@rightframe
      \framed@topframe  \framed@bottomframe
      \framed@frame
      \node [anchor=north west, inner sep=0pt, outer sep=0pt]
        at (0,0) {\box\framedbox};
  \endtikzpicture}%
  \wrapbox[%
    left=\kern\framed@leftmargin,
    right=\kern\framed@rightmargin,
    top=\kern\framed@topmargin,
    bottom=\kern\framed@bottommargin]\box\nextbox
  \box\nextbox
  \gsetlen\nextdepth{\fbdp+\framed@bottomoffset+\framed@bottommargin}
  \endgroup}

% environment (start in vmode by default)
\newenvironment{framedtext}[1][]
{\begingroup
 \def\framedtext@options{#1}%
 \setupframed{vmode, width=\hsize, offset=3pt, align=default, #1}
 \setbox\nextbox\vbox\bgroup
   \hsize=\dimexpr\framed@width-\framed@leftoffset
                               -\framed@rightoffset\relax
   \ifx\framed@vmode\const@yes\else\leavevmode\fi
   \framed@align\ignorespaces}
{\egroup
 \expandonearg\framed[\framedtext@options]{\box\nextbox}%
 \endgroup}

%>>

%>>
%<< [· Inframed text (use \hbox) ·············] >>

\def\inframe{\dosingleempty\doinframe}
\def\doinframe[#1]#2{%
  \setbox\nextbox=\vbox{%
    \framed[hmode, offset=2pt, align=default,% start in hmode
            top=, bottom=, #1]
    {\gsetlen\scratchdimen
      {-\framed@bottomoffset-\framed@bottommargin}#2}}%
  \raisebox\scratchdimen{\box\nextbox}}

%>>

%<< [· Vertical spacing made easy ············] >>

\declareparameters[blank]{%
  % prefix added automatically for standard usages:
  % (e)store(s), dimension(s), number(s)
  dimension=@blank,% /parameters/blank/@blank to store arg evaluated as dimension
  % fine tuning needs explicit prefix first
  blank,% also /parameters/blank(/.cd)
  .is choice,
  small/.style={@blank=\smallskipamount},
  medium/.style={@blank=\medskipamount},
  big/.style={@blank=\bigskipamount},
  half/.style={@blank=.5\baselineskip},
  line/.style={@blank=\baselineskip},
  .unknown/.style={@blank=\pgfkeyscurrentname}}

\newcommand\blank[1][line]{%
  \scratchdimen0pt
  \def\doit##1{%
    \splitatstar{##1}%
    \getparameters[blank]{\@dimen}%
    \setlen\scratchdimen{\scratchdimen+\blank@blank*\@count}}
  \processcommalist[#1]\doit
  \vskip\scratchdimen}

\def\splitatstar#1{%
  \doifinstringelse{*}{#1}
    {\blanksplit#1\blanksplit}
    {\blanksplit1*#1\blanksplit}}

\def\blanksplit#1*#2\blanksplit{%
  \def\@count{#1}\def\@dimen{#2}}

%>>
%<< [· Commands or switch macros ·············] >>

%D macros \groupedcommand,
%D        \simplegroupedcommand
%D
%D Let us create commands that can work as switches too.
%D The 'simple' version only group once, so kerning should not be
%D a problem.
%D
%D Example:
%D
%D \def\bold{\groupedcommand{\bf}{\relax}}% 'before' and 'after'
%D   --> \bold{text} or {\bold text}

\long\def\HandleGroup#1#2%
  {\bgroup
   \long\def\BeforeGroup{\bgroup#1\bgroup\aftergroup\AfterGroup}%
   \long\def\AfterGroup {#2\egroup\egroup}%
   \afterassignment\BeforeGroup
   \let\next=}

\long\def\HandleSimpleGroup#1#2% no inner group (so no kerning interference)
  {\bgroup
   \long\def\BeforeGroup{\bgroup\aftergroup\AfterGroup#1}%
   \long\def\AfterGroup {#2\egroup}%
   \afterassignment\BeforeGroup
   \let\next=}

\long\def\HandleNoGroup#1#2%
  {\long\def\AfterGroup{#2\egroup}%
   \bgroup\aftergroup\AfterGroup#1}

\long\def\groupedcommand#1#2%
  {\doifnextbgroupelse{\HandleGroup{#1}{#2}}{\HandleNoGroup{#1}{#2}}}

\long\def\simplegroupedcommand#1#2%
  {\doifnextbgroupelse{\HandleSimpleGroup{#1}{#2}}{\HandleNoGroup{#1}{#2}}}

%>>


%%% Local Variables:
%%% TeX-master: "./demo.tex"
%%% End:
